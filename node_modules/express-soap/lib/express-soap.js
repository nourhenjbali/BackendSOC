"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var soapOrigin = require("soap");
var events = require("events");
var express_1 = require("express");
var WSDL = soapOrigin['WSDL'];
var Server = soapOrigin['Server'];
/**
 * @override of soap.Server constructor.
 * Ensures that path is immediately passed to router/server.
 */
function ExpressServerConstructor(router, services, wsdl, options) {
    var _this = this;
    // Path is fix and should be defined externally instead
    var PATH = '/';
    events.EventEmitter.call(this);
    options = options || {};
    this.path = PATH;
    this.services = services;
    this.wsdl = wsdl;
    this.suppressStack = options && options.suppressStack;
    this.returnFault = options && options.returnFault;
    this.onewayOptions = options && options.oneWay || {};
    var isWsdlReady = false;
    var wsdlReadyError;
    var wsdlReadyListeners = [];
    router
        .route(PATH)
        .all(function (req, res, next) {
        if (typeof _this.authorizeConnection === 'function') {
            if (!_this.authorizeConnection(req)) {
                res.end();
                return;
            }
        }
        var processRequest = function () {
            if (wsdlReadyError) {
                next(wsdlReadyError);
                return;
            }
            _this._requestListener(req, res, next);
        };
        if (isWsdlReady) {
            processRequest();
        }
        else {
            wsdlReadyListeners.push(processRequest);
        }
    });
    wsdl.onReady(function (err) {
        isWsdlReady = true;
        wsdlReadyError = err;
        wsdlReadyListeners.forEach(function (listener) { return listener(); });
    });
    this._initializeOptions(options);
}
/**
 * Creates soap server with constructor override
 */
function createSoapServer(router, options) {
    options = __assign({}, options);
    var wsdl = new WSDL(options.wsdl || options.xml || options.services, options.uri, options);
    var server = Object.create(Server.prototype);
    if (options.log)
        server.log = options.log;
    ExpressServerConstructor.call(server, router, options.services, wsdl);
    return server;
}
exports.createSoapServer = createSoapServer;
/**
 * Soap server middleware. Entry point of express-soap
 */
function soap(options) {
    var router = express_1.Router();
    createSoapServer(router, options);
    return router;
}
exports.soap = soap;
//# sourceMappingURL=express-soap.js.map